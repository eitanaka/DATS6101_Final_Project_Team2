# Function to create boxplot with mean and standard deviation
# Load the necessary libraries
library(ggplot2)
library(gridExtra)
# Create a function to plot boxplot with distribution lines
plot_boxplot <- function(x) {
# Calculate mean and standard deviation
mean_x <- mean(x, na.rm = TRUE)
sd_x <- sd(x, na.rm = TRUE)
# Create the plot
ggplot(data = data.frame(x), aes(x = x)) +
geom_boxplot() +
geom_vline(xintercept = mean_x, color = "blue", size = 1) +
geom_vline(xintercept = mean_x - sd_x, color = "red", linetype = "dashed", size = 1) +
geom_vline(xintercept = mean_x + sd_x, color = "red", linetype = "dashed", size = 1) +
labs(x = names(x), y = "Value") +
theme_bw() +
theme(plot.title = element_text(size = 12, hjust = 0.5),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
axis.text = element_text(size = 8),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
}
# Filter the numeric variables
numeric_vars <- sapply(master_df, is.numeric)
numeric_df <- master_df[, numeric_vars]
# Create boxplots for all numeric variables
par(mfrow=c(2,4)) # to display plots in a grid of 4x4
for (i in 1:ncol(numeric_df)) {
boxplot(numeric_df[,i], main=names(numeric_df)[i])
}
str(master_df)
summary(master_df)
# Create a function to plot histograms with distribution lines
plot_histogram <- function(x) {
# Calculate mean and standard deviation
mean_x <- mean(x, na.rm = TRUE)
sd_x <- sd(x, na.rm = TRUE)
# Create the plot
ggplot(data = data.frame(x), aes(x = x)) +
geom_histogram(aes(y = ..density..), binwidth = 1, colour = "black", fill = "white") +
geom_density(alpha = .2, fill = "#FF6666") +
geom_vline(xintercept = mean_x, color = "blue", size = 1) +
geom_vline(xintercept = mean_x - sd_x, color = "red", linetype = "dashed", size = 1) +
geom_vline(xintercept = mean_x + sd_x, color = "red", linetype = "dashed", size = 1) +
labs(x = names(x), y = "Density") +
theme_bw() +
theme(plot.title = element_text(size = 12, hjust = 0.5),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
axis.text = element_text(size = 8),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
}
# Filter the numeric variables
numeric_vars <- sapply(master_df, is.numeric)
numeric_df <- master_df[, numeric_vars]
# Create a list of plots for all numeric variables
plots <- lapply(numeric_df, plot_histogram)
plots
cor_matrix <- cor(master_df[,6:length(master_df)])
# Create 6 subset for cor_matrix or cor_heatmap
dep_mth_df <- subset(master_df, select = "DEPRESSION")
dep_mth_df <- cbind(dep_mth_df, master_df[,9])
# Data frame containing depression, mhlth, health risk behaviors
dep_mth_hrb <- dep_mth_df
dep_mth_hrb["BINGE"] <- master_df[,6]
dep_mth_hrb["LPA"] <- master_df[,8]
dep_mth_hrb["SLEEP"] <- master_df[,10]
# Data frame containing depression, mhlth, MT
dep_mth_mt <- cbind(dep_mth_df, master_df[12:16])
# Data frame containing depression, mhlth, EA, MI, Pop
dep_mth_ea_mi_pop <- cbind(dep_mth_df, master_df[18:24])
# Data Frame containing depression, mhlth, MI, Pop, CT
dep_mth_ct <- cbind(dep_mth_df, master_df[26:34])
# Data Frame containing depression, mhlth, ES
dep_mth_es <-cbind(dep_mth_df, master_df[36:41])
# Data Frame containing depression, mhlth, others
dep_mth_geo <- cbind(dep_mth_df, master_df[42:length(master_df)])
# A set of cormatrix
cor_matrix_HRB <- cor(dep_mth_hrb)
cor_matrix_MT_EA <- cor(dep_mth_mt)
cor_matrix_EA_MI_POP <- cor(dep_mth_ea_mi_pop)
cor_matrix_CT <- cor(dep_mth_ct)
cor_matrix_ES <- cor(dep_mth_es)
cor_matrix_GEO <- cor(dep_mth_geo)
# Plot
corrplot(cor_matrix_HRB, method = "circle", type = "upper", order = "hclust", addCoef.col = "black", tl.col = "black", tl.srt = 45, cl.pos = "n")
corrplot(cor_matrix_MT_EA, method = "circle", type = "upper", order = "hclust", addCoef.col = "black", tl.col = "black", tl.srt = 45, cl.pos = "n")
corrplot(cor_matrix_EA_MI_POP, method = "circle", type = "upper", order = "hclust", addCoef.col = "black", tl.col = "black", tl.srt = 45, cl.pos = "n")
corrplot(cor_matrix_CT, method = "circle", type = "upper", order = "hclust", addCoef.col = "black", tl.col = "black", tl.srt = 45, cl.pos = "n")
corrplot(cor_matrix_ES, method = "circle", type = "upper", order = "hclust", addCoef.col = "black", tl.col = "black", tl.srt = 45, cl.pos = "n")
corrplot(cor_matrix_GEO, method = "circle", type = "upper", order = "hclust", addCoef.col = "black", tl.col = "black", tl.srt = 45, cl.pos = "n")
cols_names_depression <- names(which(abs(cor_matrix[2, ]) >= 0.3))
depression_cor_df <- master_df[, c("DEPRESSION", "LPA", "EA_High_school_graduate", "EA_Bachelors_degree", "EA_Graduate_or_professional_degree", "MI_Estimate", "URBANIZED_AREA_POP_CEN_2010", "pct_URBANIZED_AREA_POP_CEN_2010")]
cols_mhlth <- names(which(abs(cor_matrix[4, ]) >= 0.3))
mhlth_cor_df <- master_df[,c("MHLTH", "LPA", "SLEEP", "MT_never_married", "MT_now_married", "MT_Separated", "EA_Less_than_high_school_graduate", "EA_High_school_graduate", "EA_Bachelors_degree", "EA_Graduate_or_professional_degree", "MI_Estimate", "ES_Civilian_labor_force_employed", "ES_Civilian_labor_force_unemployed")]
calculate_VIF <- function(data, target_col) {
X <- data[, !colnames(data) %in% target_col]
vif <- data.frame(
Feature = colnames(X),
VIF = apply(X, 2, function(x) vif(lm(x ~ ., data=X)))
)
return(vif)
}
depression_VIF <- calculate_VIF(depression_cor_df, "DEPRESSION")
mhlth_VIF <- calculate_VIF(mhlth_cor_df, "MHLTH")
depression_VIF
mhlth_VIF
# multiple linear regression model for depression
depression_model <- lm(DEPRESSION ~ LPA + EA_High_school_graduate + EA_Bachelors_degree + EA_Graduate_or_professional_degree + MI_Estimate + URBANIZED_AREA_POP_CEN_2010 + pct_URBANIZED_AREA_POP_CEN_2010, data = depression_cor_df)
# multiple linear regression model for poor mental health
mhlth_model <- lm(MHLTH ~ LPA + SLEEP + MT_never_married + MT_now_married + MT_Separated + EA_Less_than_high_school_graduate + EA_High_school_graduate + EA_Bachelors_degree + EA_Graduate_or_professional_degree + MI_Estimate + ES_Civilian_labor_force_employed + ES_Civilian_labor_force_unemployed, data = mhlth_cor_df)
summary(depression_model)
summary(mhlth_model)
# The Durbin-Watson test
library(lmtest)
depression_dwtest <- dwtest(depression_model)
mhlth_dwtest <- dwtest(mhlth_model)
depression_dwtest
mhlth_dwtest
# Breusch-Pagan test
bptest(depression_model)
bptest(mhlth_model)
# Cook's distance and Leverage
# depression
depression_influential <- influence.measures(depression_model)
depression_infmat <- depression_influential$infmat
sum(depression_infmat[, 'cook.d'] > 1)
sum(depression_infmat[, 'hat'] > 2 * 7 / length(depression_infmat[, 'hat']))
# mhlth
mhlth_influential <- influence.measures(mhlth_model)
mhlth_infmat <- mhlth_influential$infmat
sum(mhlth_infmat[, 'cook.d'] > 1)
sum(mhlth_infmat[, 'hat'] > 2 * 7 / length(depression_infmat[, 'hat']))
#regression tree model for depression
# control_params1 <- rpart.control(minsplit = 20, cp = 0.0005, maxdepth = 10)
#
# depression.tree <- rpart(DEPRESSION ~ LPA + EA_High_school_graduate + EA_Bachelors_degree + EA_Graduate_or_professional_degree + MI_Estimate + URBANIZED_AREA_POP_CEN_2010 + pct_URBANIZED_AREA_POP_CEN_2010, data = depression_cor_df, method="class", control = control_params1)
#
# plot(depression.tree, uniform=TRUE, main="Depression Rate Tree")
# text(depression.tree, use.n=TRUE, all=TRUE, cex=.8)
#
# p <- prp(depression.tree)
# p$nodepar$lab.cex <- 0.8
# p$nodepar$cex <- 0.8
# p$nodepar$lab.col <- "black"
#
#
# # regression tree model for poor mental health
# control_params2 <- rpart.control(minsplit = 20, cp = 0.0005, maxdepth = 10)
#
# mhlth.tree <- rpart(MHLTH ~ LPA + SLEEP + MT_never_married + MT_now_married + MT_Separated + EA_Less_than_high_school_graduate + EA_High_school_graduate + EA_Bachelors_degree + EA_Graduate_or_professional_degree + MI_Estimate + ES_Civilian_labor_force_employed + ES_Civilian_labor_force_unemployed, data = mhlth_cor_df, method = "class", control = control_params2)
#
# plot(mhlth.tree, uniform=TRUE, main="Poor Mental Health Rate Tree")
# text(mhlth.tree, use.n=TRUE, all=TRUE, cex=.8)
#
# p <- prp(mhlth.tree)
# p$nodepar$lab.cex <- 0.8
# p$nodepar$cex <- 0.8
# p$nodepar$lab.col <- "black"
# fancy tree plots
# fancy depression tree
depression.tree.2 <- rpart(DEPRESSION ~ LPA + EA_High_school_graduate + EA_Bachelors_degree + EA_Graduate_or_professional_degree + MI_Estimate + URBANIZED_AREA_POP_CEN_2010 + pct_URBANIZED_AREA_POP_CEN_2010, data = depression_cor_df)
fancyRpartPlot(depression.tree.2, main = "Depression Rate Tree")
# fancy mental health tree
mhlth.tree.2 <- rpart(MHLTH ~ LPA + SLEEP + MT_never_married + MT_now_married + MT_Separated + EA_Less_than_high_school_graduate + EA_High_school_graduate + EA_Bachelors_degree + EA_Graduate_or_professional_degree + MI_Estimate + ES_Civilian_labor_force_employed + ES_Civilian_labor_force_unemployed, data = mhlth_cor_df, control = rpart.control(maxdepth = ))
fancyRpartPlot(mhlth.tree.2, main = "Poor Mental Health Rate Tree")
# pruning trees
# pruned depression tree
# pruned.depression.tree.2 <- prune(depression.tree.2, cp = 0.01)
# fancyRpartPlot(pruned.depression.tree.2)
#
# # pruned mental health tree
# pruned.mhlth.tree.2 <- prune(mhlth.tree.2, cp = 0.01)
# fancyRpartPlot(pruned.mhlth.tree.2)
View(master_df)
# Some of common RMD options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# Can globally set option for number display format.
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# Import Libraries
rm(list=ls())
library(readr)
library(ggplot2)
library(tidyr)
library(corrplot)
library(ezids)
library(car)
library(rpart)
library(rpart.plot)
library(rattle)
url <- 'https://raw.githubusercontent.com/eitanaka/DATS6101_Final_Project_Team2/main/data_set/geo_socio_health_df.csv'
master_df<- read_csv(url)
# Checking normality of dependent variables.
# To rename some columns in a data frame to make them more readable and easier to work with.This is done by using the "colnames" function to first select the column names that match the original names, and then assigning new names.
colnames(master_df)[colnames(master_df) == "MT_Never Married"] <- "MT_never_married"
colnames(master_df)[colnames(master_df) == "MT_Now married"] <- "MT_now_married"
colnames(master_df)[colnames(master_df) == "Total Population"] <- "total_population"
colnames(master_df)[colnames(master_df) == "EA_Less than high school graduate"] <- "EA_Less_than_high_school_graduate"
colnames(master_df)[colnames(master_df) == "EA_High school graduate"] <- "EA_High_school_graduate"
colnames(master_df)[colnames(master_df) == "EA_college or associate's degree"] <- "EA_college_or_associates_degree"
colnames(master_df)[colnames(master_df) == "EA_Bachelor's degree"] <- "EA_Bachelors_degree"
colnames(master_df)[colnames(master_df) == "EA_Graduate or professional degree"] <- "EA_Graduate_or_professional_degree"
master_df <- na.omit(master_df)
colSums(is.na(master_df[6:length(master_df)]))
colSums(master_df[6:length(master_df)] == 0.0)
# columns of interest
cols_of_interest <- master_df[6:length(master_df)]
# loop through all columns
for (col_name in colnames(cols_of_interest)) {
# remove outliers
new_master_df <- outlierKD2(master_df, master_df[[col_name]], rm=TRUE)
new_master_df <- na.omit(new_master_df)
new_master_df <- new_master_df[,1:(ncol(new_master_df)-2)]
}
new_master_df <- outlier_df[,1:(ncol(outlier_df)-1)]
# Some of common RMD options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# Can globally set option for number display format.
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# Import Libraries
rm(list=ls())
library(readr)
library(ggplot2)
library(tidyr)
library(corrplot)
library(ezids)
library(car)
library(rpart)
library(rpart.plot)
library(rattle)
url <- 'https://raw.githubusercontent.com/eitanaka/DATS6101_Final_Project_Team2/main/data_set/geo_socio_health_df.csv'
master_df<- read_csv(url)
# Checking normality of dependent variables.
# To rename some columns in a data frame to make them more readable and easier to work with.This is done by using the "colnames" function to first select the column names that match the original names, and then assigning new names.
colnames(master_df)[colnames(master_df) == "MT_Never Married"] <- "MT_never_married"
colnames(master_df)[colnames(master_df) == "MT_Now married"] <- "MT_now_married"
colnames(master_df)[colnames(master_df) == "Total Population"] <- "total_population"
colnames(master_df)[colnames(master_df) == "EA_Less than high school graduate"] <- "EA_Less_than_high_school_graduate"
colnames(master_df)[colnames(master_df) == "EA_High school graduate"] <- "EA_High_school_graduate"
colnames(master_df)[colnames(master_df) == "EA_college or associate's degree"] <- "EA_college_or_associates_degree"
colnames(master_df)[colnames(master_df) == "EA_Bachelor's degree"] <- "EA_Bachelors_degree"
colnames(master_df)[colnames(master_df) == "EA_Graduate or professional degree"] <- "EA_Graduate_or_professional_degree"
master_df <- na.omit(master_df)
colSums(is.na(master_df[6:length(master_df)]))
colSums(master_df[6:length(master_df)] == 0.0)
# columns of interest
cols_of_interest <- master_df[6:length(master_df)]
# loop through all columns
for (col_name in colnames(cols_of_interest)) {
# remove outliers
new_master_df <- outlierKD2(master_df, master_df[[col_name]], rm=TRUE)
new_master_df <- na.omit(new_master_df)
new_master_df <- new_master_df[,1:(ncol(new_master_df)-2)]
}
new_master_df <- new_master_df[,1:(ncol(new_master_df)-1)]
# Create a boxplot for each column
par(mfrow=c(5, 10))
for (i in 6:ncol(new_master_df)) {
boxplot(new_master_df[[i]], main=names(new_master_df)[i])
}
par(mfrow=c(5, 10))
par(mar=c(1, 1, 1, 1)) # Adjust the margins
for (i in 6:ncol(new_master_df)) {
boxplot(new_master_df[[i]], main=names(new_master_df)[i])
}
# Some of common RMD options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# Can globally set option for number display format.
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# Import Libraries
rm(list=ls())
library(readr)
library(ggplot2)
library(tidyr)
library(corrplot)
library(ezids)
library(car)
library(rpart)
library(rpart.plot)
library(rattle)
url <- 'https://raw.githubusercontent.com/eitanaka/DATS6101_Final_Project_Team2/main/data_set/geo_socio_health_df.csv'
master_df<- read_csv(url)
# Checking normality of dependent variables.
# To rename some columns in a data frame to make them more readable and easier to work with.This is done by using the "colnames" function to first select the column names that match the original names, and then assigning new names.
colnames(master_df)[colnames(master_df) == "MT_Never Married"] <- "MT_never_married"
colnames(master_df)[colnames(master_df) == "MT_Now married"] <- "MT_now_married"
colnames(master_df)[colnames(master_df) == "Total Population"] <- "total_population"
colnames(master_df)[colnames(master_df) == "EA_Less than high school graduate"] <- "EA_Less_than_high_school_graduate"
colnames(master_df)[colnames(master_df) == "EA_High school graduate"] <- "EA_High_school_graduate"
colnames(master_df)[colnames(master_df) == "EA_college or associate's degree"] <- "EA_college_or_associates_degree"
colnames(master_df)[colnames(master_df) == "EA_Bachelor's degree"] <- "EA_Bachelors_degree"
colnames(master_df)[colnames(master_df) == "EA_Graduate or professional degree"] <- "EA_Graduate_or_professional_degree"
master_df <- na.omit(master_df)
colSums(is.na(master_df[6:length(master_df)]))
colSums(master_df[6:length(master_df)] == 0.0)
# columns of interest
cols_of_interest <- master_df[6:length(master_df)]
# loop through all columns
for (col_name in colnames(cols_of_interest)) {
# remove outliers
new_master_df <- outlierKD2(master_df, master_df[[col_name]], rm=TRUE)
new_master_df <- na.omit(new_master_df)
new_master_df <- new_master_df[,1:(ncol(new_master_df)-2)]
}
new_master_df <- new_master_df[,1:(ncol(new_master_df)-1)]
# Create a boxplot for each column
par(mfrow=c(5, 10))
par(mar=c(1, 1, 1, 1))
for (i in 6:ncol(new_master_df)) {
boxplot(new_master_df[[i]], main=names(new_master_df)[i])
}
# Scatter plots with fit line for Depression and other dependent variables
for (col in names(cols_of_interest)) {
if (col != "DEPRESSION") {
plot_data <- data.frame(x = new_master_df$DEPRESSION, y = new_master_df[[col]])
plot <- ggplot(plot_data, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
xlab("Depression") +
ylab(col)
print(plot)
}
}
# Scatter plots with fit line for mhlth and other dependent variables
for (col in names(cols_of_interest)) {
if (col != "MHLTH") {
plot_data <- data.frame(x = new_master_df$MHLTH, y = new_master_df[[col]])
plot <- ggplot(plot_data, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
xlab("mhlth") +
ylab(col)
print(plot)
}
}
# Create a boxplot for each column
par(mfrow=c(5, 10))
par(mar=c(2, 2, 2, 2))
for (i in 6:ncol(new_master_df)) {
boxplot(new_master_df[[i]], main=names(new_master_df)[i])
}
# Create a boxplot for each column
par(mfrow=c(5, 10))
par(mar=c(0.75, 0.75, 0.75, 0.75))
for (i in 6:ncol(new_master_df)) {
boxplot(new_master_df[[i]], main=names(new_master_df)[i])
}
# Create a boxplot for each column
par(mfrow=c(5, 10))
par(mar=c(1, 1, 1, 1))
for (i in 6:ncol(new_master_df)) {
boxplot(new_master_df[[i]], main=names(new_master_df)[i])
}
# Create a boxplot for each column
par(mfrow=c(6, 9))
par(mar=c(1, 1, 1, 1))
for (i in 6:ncol(new_master_df)) {
boxplot(new_master_df[[i]], main=names(new_master_df)[i])
}
# Create a boxplot for each column
par(mfrow=c(6, 9))
par(mar=c(3, 3, 3, 3))
for (i in 6:ncol(new_master_df)) {
boxplot(new_master_df[[i]], main=names(new_master_df)[i])
}
# Create a boxplot for each column
par(mfrow=c(6, 9))
par(mar=c(2, 2, 2, 2))
for (i in 6:ncol(new_master_df)) {
boxplot(new_master_df[[i]], main=names(new_master_df)[i])
}
# Create a boxplot for each column
par(mfrow=c(6, 9))
par(mar=c(1, 1, 1, 1))
for (i in 6:ncol(new_master_df)) {
boxplot(new_master_df[[i]], main=names(new_master_df)[i])
}
# Some of common RMD options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# Can globally set option for number display format.
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# Import Libraries
rm(list=ls())
library(readr)
library(ggplot2)
library(tidyr)
library(corrplot)
library(ezids)
library(car)
library(rpart)
library(rpart.plot)
library(rattle)
url <- 'https://raw.githubusercontent.com/eitanaka/DATS6101_Final_Project_Team2/main/data_set/geo_socio_health_df.csv'
master_df<- read_csv(url)
# Checking normality of dependent variables.
# To rename some columns in a data frame to make them more readable and easier to work with.This is done by using the "colnames" function to first select the column names that match the original names, and then assigning new names.
colnames(master_df)[colnames(master_df) == "MT_Never Married"] <- "MT_never_married"
colnames(master_df)[colnames(master_df) == "MT_Now married"] <- "MT_now_married"
colnames(master_df)[colnames(master_df) == "Total Population"] <- "total_population"
colnames(master_df)[colnames(master_df) == "EA_Less than high school graduate"] <- "EA_Less_than_high_school_graduate"
colnames(master_df)[colnames(master_df) == "EA_High school graduate"] <- "EA_High_school_graduate"
colnames(master_df)[colnames(master_df) == "EA_college or associate's degree"] <- "EA_college_or_associates_degree"
colnames(master_df)[colnames(master_df) == "EA_Bachelor's degree"] <- "EA_Bachelors_degree"
colnames(master_df)[colnames(master_df) == "EA_Graduate or professional degree"] <- "EA_Graduate_or_professional_degree"
master_df <- na.omit(master_df)
colSums(is.na(master_df[6:length(master_df)]))
colSums(master_df[6:length(master_df)] == 0.0)
# columns of interest
cols_of_interest <- master_df[6:length(master_df)]
# loop through all columns
for (col_name in colnames(cols_of_interest)) {
# remove outliers
new_master_df <- outlierKD2(master_df, master_df[[col_name]], rm=TRUE)
new_master_df <- na.omit(new_master_df)
new_master_df <- new_master_df[,1:(ncol(new_master_df)-2)]
}
new_master_df <- new_master_df[,1:(ncol(new_master_df)-1)]
# Create a boxplot for each column
par(mfrow=c(6, 9))
par(mar=c(1, 1, 1, 1))
for (i in 6:ncol(new_master_df)) {
boxplot(new_master_df[[i]], main=names(new_master_df)[i])
}
# Scatter plots with fit line for Depression and other dependent variables
for (col in names(cols_of_interest)) {
if (col != "DEPRESSION") {
plot_data <- data.frame(x = new_master_df$DEPRESSION, y = new_master_df[[col]])
plot <- ggplot(plot_data, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
xlab("Depression") +
ylab(col)
print(plot)
}
}
# Scatter plots with fit line for mhlth and other dependent variables
for (col in names(cols_of_interest)) {
if (col != "MHLTH") {
plot_data <- data.frame(x = new_master_df$MHLTH, y = new_master_df[[col]])
plot <- ggplot(plot_data, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
xlab("mhlth") +
ylab(col)
print(plot)
}
}
# Create data frames we need afterward
cols_to_remove <- c("...1", "CountyFIPS", "GEOID", "StateAbbr", "CountyName", "MT_Total", "EA_Total", "total_population", "CT_Total", "ES_Total", "LAND_AREA")
num_df <- master_df[ , !names(master_df) %in% cols_to_remove]
str(new_master_df)
summary(new_master_df)
# Create a function to plot histograms with distribution lines
plot_histogram <- function(x) {
# Calculate mean and standard deviation
mean_x <- mean(x, na.rm = TRUE)
sd_x <- sd(x, na.rm = TRUE)
# Create the plot
ggplot(data = data.frame(x), aes(x = x)) +
geom_histogram(aes(y = ..density..), binwidth = 1, colour = "black", fill = "white") +
geom_density(alpha = .2, fill = "#FF6666") +
geom_vline(xintercept = mean_x, color = "blue", size = 1) +
geom_vline(xintercept = mean_x - sd_x, color = "red", linetype = "dashed", size = 1) +
geom_vline(xintercept = mean_x + sd_x, color = "red", linetype = "dashed", size = 1) +
labs(x = names(x), y = "Density") +
theme_bw() +
theme(plot.title = element_text(size = 12, hjust = 0.5),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
axis.text = element_text(size = 8),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
}
# Filter the numeric variables
numeric_vars <- sapply(new_master_df, is.numeric)
numeric_df <- new_master_df[, numeric_vars]
# Create a list of plots for all numeric variables
plots <- lapply(numeric_df, plot_histogram)
plots
# Histograms
# Two histograms: one for the distribution of tract-level depression rates and one for the distribution of tract-level poor mental health rates.
dep_hist <- hist(new_master_df$DEPRESSION, main = "Distribution of Tract-level Depression Rates")
dep_hist
mhlth_hist <- hist(new_master_df$MHLTH, main = "Distribution of Tract-level Poor Mental Health Rates")
mhlth_hist
# QQ plots for the distribution of tract-level depression rates and tract-level poor mental health rates.
dep_qq <- qqnorm(new_master_df$DEPRESSION, main = "Distribution of Tract-level Depression Rates")
dep_qq
mhlth_qq <- qqnorm(new_master_df$MHLTH, main = "Distribution of Tract-level Poor Mental Health Rates")
mhlth_qq
# Create a correlation matrix
cor_matrix <- cor(numeric_df)
# Create two lists which have the names of variables highly correlated (more then 0.3 or less than -0.3)
high_dep_cor_list <- names(which(cor_matrix["DEPRESSION",] > 0.3 | cor_matrix["DEPRESSION",] < -0.3))
high_mhlth_cor_list <- names(which(cor_matrix["mhlth",] > 0.3 | cor_matrix["mhlth",] < -0.3))
